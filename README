AllowSubscriptions
==============

This is heavily based on Juixe's acts_as_voteable.  I just did a bunch of changes for it to manage subscriptions instead of votes.

Installation
=======
1) Run script/generate allow_subscriptions.  I did this so you can edit the files to your liking easily.  This will create/edit the following files
  a) app/controllers/subscriptions_controller.rb
  b) app/models/subscription.rb
  c) config/routes.rb to contain "map.resources :subscriptions"
2) Add "allow_subscriptions" to the model that will become subscriptionable.  See the example section.
3) Add a "subscribable?" method that returns a boolean to evaluate if instance is subscribable or not.
4) Add "has_many :subscriptions, :dependent => :destroy" to your User model


Usage
=======
1) If you want to put conditions to check whether or not a subscription can be created, put a method in your subscribable class called "subscribable?" that returns true or false based on your own requirements.

model.subscribe(user)
model.subscribed_by?(user)
model.subscribers
model.subscribers_count
model.subscription_of(user)

Helpers
=======
There are helpers included to make links that automatically create the vote.  These helpers should only be used if you don't need to add any custom fields to the votes table.
1) link_to_subscribe(object, options={})
- Usage: link_to_subscribe(record, :text => "Override the subscribe link text")
2) link_to_unsubscribe(object={})
- Usage: link_to_unsubscribe(record, :text => "Override the unsubscribe link text")
3) link_to_subscription(record, options={})
- If user is logged in, then it will show link_to_subscribe or link_to_unsubscribe based on whether or not the user has subscribed to the object.  If the user is not logged in, then it will show nothing, but this can be overridden by adding a :logged_out_text param.
- Usage: link_to_subscription(object, :subscribe_text => "Subscribe!", :unsubscribe_text => "Unsubscribe!", :logged_out_text => "You need to login to subscribe to this.")

For the helpers above, you can pass an option :to which will return the user to the provided path. Defaults to the subscribable record. Ex:
link_to_subscription record, :to => home_path

Example
=======

1) Make your ActiveRecord model allow_subscriptions.
  class Model < ActiveRecord::Base
    allow_subscriptions
  end

Copyright (c) March 2009 Ramon Tayag, released under the MIT license
